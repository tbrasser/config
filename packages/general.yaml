mqtt:
  sensor:
    - name: Zigbee2mqtt Networkmap
      # if you change base_topic of Zigbee2mqtt, change state_topic accordingly
      state_topic: zigbee2mqtt/bridge/response/networkmap
      value_template: >-
        {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
      # again, if you change base_topic of Zigbee2mqtt, change json_attributes_topic accordingly
      json_attributes_topic: zigbee2mqtt/bridge/response/networkmap
      json_attributes_template: "{{ value_json.data.value | tojson }}"
# Example configuration.yaml entry
fan:
  - platform: template
    fans:
      humidifier_fan:
        friendly_name: "Humidifier Fan"
        value_template: "{{ states('binary_sensor.humidifier') }}"
        preset_mode_template: "{{ states('select.hhp70cah011_modus') }}"
        turn_on:
          service: select.select
        turn_off:
          service: script.fan_off
        set_percentage:
          service: script.fans_set_speed
          data:
            percentage: "{{ percentage }}"
        set_preset_mode:
          service: script.fans_set_preset_mode
          data:
            preset_mode: "{{ preset_mode }}"
        speed_count: 5
        preset_modes:
          - 'sleep'
          - 'auto'
          - 'allergen'
          - 'max'
sensor:
  - platform: openai_response
    api_key: !secret openai_apikey
    model: gpt-3.5-turbo-instruct # "text-davinci-003"
  - platform: history_stats
    name: Lavalamp on past 8 hours
    entity_id: light.powerstrip_diningroom_rechts_stopcontact_2
    state: "on"
    type: time
    duration: 08:00
    end: "{{ now() }}"
  # Time Date
  - platform: time_date
    display_options:
      - time
      - date
      - date_time
      - date_time_iso
      - time_date
      - time_utc
  - platform: template
    sensors:
      dagdeel:
        value_template: >
          {% set state = states('sensor.time') %}
          {% if '23:00' <= state < '01:00' %}
            nacht-begin
          {% elif '01:00' <= state < '03:00' %}
            nacht-mid
          {% elif '03:00' <= state < '05:00' %}
            nacht-eind
          {% elif '05:00' <= state < '07:00' %}
            ochtend-begin
          {% elif '07:00' <= state < '09:00' %}
            ochtend-mid
          {% elif '09:00' <= state < '11:00' %}
            ochtend-eind
          {% elif '11:00' <= state < '13:00' %}
            middag-begin
          {% elif '13:00' <= state < '15:00' %}
            middag-mid
          {% elif '15:00' <= state < '17:00' %}
            middag-eind
          {% elif '17:00' <= state < '19:00' %}
            avond-begin
          {% elif '19:00' <= state < '21:00' %}
            avond-mid
          {% else %}
            avond-eind
          {% endif %} 

